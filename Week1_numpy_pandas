{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Week1-SOC.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YAw-t5Q9r4Sf"
      },
      "source": [
        "# *Numpy*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YKtAPAvEGcZp"
      },
      "source": [
        "[This](https://www.youtube.com/watch?v=QUT1VHiLmmI) is a good video covering all the basics of numpy. \n",
        "\n",
        "I have written some code below for some important operations. (video is optional if you can just skim through the code)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_S9b99xG2IDZ"
      },
      "source": [
        "**Import the numpy library**\n",
        "\n",
        "This statement is to import library (pre written code) into our workspace."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J4orsDgt2Bxr"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ysEFDUJW22hL"
      },
      "source": [
        "**Basic numpy operations**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dXstIU-9225t",
        "outputId": "69eb54cc-a8f2-46a7-8daa-59a820cb746a"
      },
      "source": [
        "# making an array from a python list\n",
        "# generic syntax np.array(<array>)\n",
        "\n",
        "a1 = np.array([1,2,3,4,5])\n",
        "print(a1)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 2 3 4 5]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EB-Vtj093kUR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70653eb7-9c4a-40d5-85ba-9793017e9dfc"
      },
      "source": [
        "# gives shape\n",
        "print(a1.shape)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(5,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NQRvbu9C3kt8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "113bbef3-e372-4460-a2e7-0084f28d0eb7"
      },
      "source": [
        "# gives number of elements\n",
        "print(a1.size)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vc2KEtszyaL1",
        "outputId": "edb0665b-2043-4f7b-cd9b-154eeb9f653d"
      },
      "source": [
        "# indexing and slicing the array\n",
        "a2 = np.array([[1,2,3],[4,5,6]])\n",
        "print(a2)\n",
        "print(a2.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n",
            "(2, 3)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "guXKrIgS39ON",
        "outputId": "10902ffb-45b2-4d48-96cc-d6dcc398f2f2"
      },
      "source": [
        "# returns number of dimensions\n",
        "print(a2.ndim)\n",
        "print(a1.ndim)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2\n",
            "1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0DWelDKRqNq0"
      },
      "source": [
        "# to copy the array\n",
        "a3 = a1 # do not do this (as it is a pass by refernece)\n",
        "a3 = a1.copy() # do this"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DIB4MzvqYd6H"
      },
      "source": [
        "**Operations for indexing and slicing**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KfYGSfka2SN7",
        "outputId": "bb498a5b-0fdf-41e5-8a58-7410ae008f9a"
      },
      "source": [
        "# indexing for a 1-D array its similar to c++\n",
        "print(a1[1])\n",
        "print(a1[-1]) # -1 index refers to the last element, -2 means 2nd last etc"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2\n",
            "5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9MAkgqhs60J9",
        "outputId": "a13bd5dd-2ae4-4751-baaa-8ae62e10e0bb"
      },
      "source": [
        "# indexing is array[row, column]\n",
        "print(a2[1, 2])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "6\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fdYjhpQW23LB",
        "outputId": "4ac287c5-4a84-468e-de6a-ad57e43f45c7"
      },
      "source": [
        "# slicing is the same as a python list, i.e array[start:stop+1:stepsize]\n",
        "print(a1[:]) # leaving something blank is taken as the min/max possible value\n",
        "print(a1[0:3])\n",
        "print(a1[4::-1]) # try 0:5:2"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 2 3 4 5]\n",
            "[1 2 3]\n",
            "[5 4 3 2 1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-JF6xTjq4-3s",
        "outputId": "46dd2ea9-b14d-457e-f76d-5c208e1d4495"
      },
      "source": [
        "# slicing is similar to python list and all the things done before work\n",
        "print(a2[1,:]) # 2nd row\n",
        "print(a2[:,1]) # 2nd column"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[4 5 6]\n",
            "[2 5]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m9i-953sYl-U"
      },
      "source": [
        "**Initializing arrays**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aVE-g-0pHjZU",
        "outputId": "dbff8f64-d74e-4dca-b8c2-52802772f8ca"
      },
      "source": [
        "array_zeros = np.zeros((5,5))\n",
        "print(array_zeros)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0.]\n",
            " [0. 0. 0. 0. 0.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KJMaNXiHIdub",
        "outputId": "254fdaf2-481d-49e8-8dcb-4d808fd8d491"
      },
      "source": [
        "array_ones = np.ones((2,4))\n",
        "print(array_ones)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1. 1. 1. 1.]\n",
            " [1. 1. 1. 1.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dAKg_IFkIdkB",
        "outputId": "3fddf92e-db97-48d8-e421-d816ce94fe0c"
      },
      "source": [
        "array_full = np.full((3,4),5)\n",
        "print(array_full)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[5 5 5 5]\n",
            " [5 5 5 5]\n",
            " [5 5 5 5]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y3TQ_jjOZYt9",
        "outputId": "b2cf8234-722f-41af-c919-753404c5afad"
      },
      "source": [
        "# for a randomly intiliazed array\n",
        "random_array = np.random.rand(2,3)\n",
        "print(random_array)\n",
        "# for a random integer array\n",
        "randomint_array = np.random.randint(-5,5, size= (2,2))\n",
        "print(randomint_array)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.304777   0.35411275 0.14978901]\n",
            " [0.02579297 0.2783211  0.50037246]]\n",
            "[[ 3  1]\n",
            " [ 4 -4]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H70kPDJ3bTBq",
        "outputId": "d99fb379-8db3-4948-997e-551d1937f02d"
      },
      "source": [
        "# for an indentity matrix\n",
        "print(np.identity(4))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1. 0. 0. 0.]\n",
            " [0. 1. 0. 0.]\n",
            " [0. 0. 1. 0.]\n",
            " [0. 0. 0. 1.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XQqKAoYhbM9i",
        "outputId": "52142112-4763-45fd-9501-c47363551c02"
      },
      "source": [
        "# To repeat an array\n",
        "arr = np.array([[1,2]])\n",
        "print(np.repeat(arr, 4, axis= 0))\n",
        "arr1 = np.array([[1],[2]])\n",
        "print(np.repeat(arr1, 4, axis= 1))\n",
        "# axis 0 implies the first dimension (the rows) and axis 1 is the second dimension (the columns)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1 1 1 1 2 2 2 2]]\n",
            "[[1 1 1 1]\n",
            " [2 2 2 2]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "otycyVkxpU_M"
      },
      "source": [
        "**Algebra**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5lojLI7fpcjB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9360d78c-82d6-46a3-baa1-ca38603ed90c"
      },
      "source": [
        "a = np.array([1,2,3,4,5,6])\n",
        "print(a + 2) # try -, *, / and ** and see what happens"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[3 4 5 6 7 8]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rzt280zUpwdd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "68982b21-6d79-40c5-a2e8-95290a70c7ed"
      },
      "source": [
        "# adding two arrays\n",
        "b = np.array([6,7,8,9,10,11])\n",
        "print(a+b)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[ 7  9 11 13 15 17]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2y1sHf7xrqJW"
      },
      "source": [
        "# *Pandas*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S7uP-R9hrQnS"
      },
      "source": [
        "**How to read data from a .csv file**\n",
        "\n",
        "[file used](https://drive.google.com/file/d/1W_wbWH7NFfaoy-McRFHNiEIJh22oVlqQ/view?usp=sharing)\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QmyULFGTpwQ-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 343
        },
        "outputId": "6e890263-512e-4b13-acd6-576260734740"
      },
      "source": [
        "# reading the data\n",
        "dataset = pd.read_csv('test.csv')\n",
        "dataset[:][0:10] # this is a dataframe"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Serial No.</th>\n",
              "      <th>GRE Score</th>\n",
              "      <th>TOEFL Score</th>\n",
              "      <th>University Rating</th>\n",
              "      <th>SOP</th>\n",
              "      <th>LOR</th>\n",
              "      <th>CGPA</th>\n",
              "      <th>Research</th>\n",
              "      <th>Chance of Admit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>337</td>\n",
              "      <td>118</td>\n",
              "      <td>4</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4.5</td>\n",
              "      <td>9.65</td>\n",
              "      <td>1</td>\n",
              "      <td>0.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>324</td>\n",
              "      <td>107</td>\n",
              "      <td>4</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.5</td>\n",
              "      <td>8.87</td>\n",
              "      <td>1</td>\n",
              "      <td>0.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>316</td>\n",
              "      <td>104</td>\n",
              "      <td>3</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>8.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>322</td>\n",
              "      <td>110</td>\n",
              "      <td>3</td>\n",
              "      <td>3.5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>8.67</td>\n",
              "      <td>1</td>\n",
              "      <td>0.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>314</td>\n",
              "      <td>103</td>\n",
              "      <td>2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.21</td>\n",
              "      <td>0</td>\n",
              "      <td>0.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>330</td>\n",
              "      <td>115</td>\n",
              "      <td>5</td>\n",
              "      <td>4.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>9.34</td>\n",
              "      <td>1</td>\n",
              "      <td>0.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>321</td>\n",
              "      <td>109</td>\n",
              "      <td>3</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>8.20</td>\n",
              "      <td>1</td>\n",
              "      <td>0.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>308</td>\n",
              "      <td>101</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.90</td>\n",
              "      <td>0</td>\n",
              "      <td>0.68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>302</td>\n",
              "      <td>102</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.5</td>\n",
              "      <td>8.00</td>\n",
              "      <td>0</td>\n",
              "      <td>0.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>323</td>\n",
              "      <td>108</td>\n",
              "      <td>3</td>\n",
              "      <td>3.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.60</td>\n",
              "      <td>0</td>\n",
              "      <td>0.45</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Serial No.  GRE Score  TOEFL Score  ...  CGPA  Research  Chance of Admit\n",
              "0           1        337          118  ...  9.65         1             0.92\n",
              "1           2        324          107  ...  8.87         1             0.76\n",
              "2           3        316          104  ...  8.00         1             0.72\n",
              "3           4        322          110  ...  8.67         1             0.80\n",
              "4           5        314          103  ...  8.21         0             0.65\n",
              "5           6        330          115  ...  9.34         1             0.90\n",
              "6           7        321          109  ...  8.20         1             0.75\n",
              "7           8        308          101  ...  7.90         0             0.68\n",
              "8           9        302          102  ...  8.00         0             0.50\n",
              "9          10        323          108  ...  8.60         0             0.45\n",
              "\n",
              "[10 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OzVLRsnhp1tD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8c7c3114-1a3b-4581-8c02-d61300421899"
      },
      "source": [
        "# generally we want to use arrays and not dataframes so we use\n",
        "array = dataset[['University Rating']].values # returns an array\n",
        "array[0:10]"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[4],\n",
              "       [4],\n",
              "       [3],\n",
              "       [3],\n",
              "       [2],\n",
              "       [5],\n",
              "       [3],\n",
              "       [2],\n",
              "       [1],\n",
              "       [3]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gLFk_5AspwAP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dc36a00f-a133-4a5e-c42e-6c750f1b954c"
      },
      "source": [
        "array = dataset[['GRE Score'    ,'TOEFL Score'\t,'University Rating']].values\n",
        "array[:][0:10]"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[337, 118,   4],\n",
              "       [324, 107,   4],\n",
              "       [316, 104,   3],\n",
              "       [322, 110,   3],\n",
              "       [314, 103,   2],\n",
              "       [330, 115,   5],\n",
              "       [321, 109,   3],\n",
              "       [308, 101,   2],\n",
              "       [302, 102,   1],\n",
              "       [323, 108,   3]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    }
  ]
}